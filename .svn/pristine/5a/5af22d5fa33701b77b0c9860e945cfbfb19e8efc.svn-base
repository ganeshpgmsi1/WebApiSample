using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniversalWeather.CMS.API.Domain.Services;
using UniversalWeather.CMS.API.Domain.Repository;
using UniversalWeather.CMS.API.Domain.BlogRollItem;
using UniversalWeather.CMS.API.Utilities.Extensions;
using UniversalWeather.CMS.API.Application.Exceptions;
using UniversalWeather.CMS.API.Application.Common;
using System.Threading.Tasks;

namespace UniversalWeather.CMS.API.Application.Service
{
    public class BlogRollItemService : BaseService, IBlogRollItemService
    {
        private readonly IBlogRollItemRepository _blogRollItemRepository;

        public BlogRollItemService(IBlogRollItemRepository repository)
        {
            _blogRollItemRepository = repository;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<BlogRollItem> GetBlogRollItem(Guid id)
        {
            var blogRollItem = _blogRollItemRepository.Get(id);
            return await blogRollItem;
        }

        /// <summary>
        /// Gets a blogRollItem via a complete object
        /// </summary>
        /// <param name="blogRollItem">The blogRollItem object to get</param>
        /// <returns>A blogRollItem</returns>
        public async Task<BlogRollItem> GetBlogRollItem(BlogRollItem blogRollItem)
        {
            var blogRoll = await _blogRollItemRepository.Get(blogRollItem);
            return blogRoll;
        }

        /// <summary>
        /// Saves a blogRollItem to the database
        /// </summary>
        /// <param name="blogRollItem">A blogRollItem to save</param>
        public async Task<int> AddBlogRollItem(BlogRollItem blogRollItem)
        {
            return await _blogRollItemRepository.AddBlogRollItem(blogRollItem);
        }

        /// <summary>
        /// Deletes a blogRollItem via the unique guid
        /// </summary>
        /// <param name="id">The guid of the blogRollItem</param>
        public async Task<int> DeleteBlogRollItem(Guid id)
        {
            return await _blogRollItemRepository.Delete(id);
        }

        /// <summary>
        /// Gets all the blogRollItems in the table
        /// </summary>
        /// <returns>A list of blogRollItems</returns>
        public async Task<IQueryable<BlogRollItem>> GetAll()
        {
            var blogRollItems = _blogRollItemRepository.GetAllAync();
            return await blogRollItems;
        }

        /// <summary>
        /// Updates a blogRollItem
        /// </summary>
        /// <param name="blogRollItem">The blogRollItem to update</param>
        public async Task<int> UpdateBlogRollItem(BlogRollItem blogRollItem)
        {
            return await _blogRollItemRepository.UpdateAsync(blogRollItem);
        }
    }
}
