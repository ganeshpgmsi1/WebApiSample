using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Text;
using UniversalWeather.CMS.API.Domain.Appointment;
using UniversalWeather.CMS.API.Domain.Services;
using UniversalWeather.CMS.API.Domain.Repository;
using UniversalWeather.CMS.API.Utilities.Email;
using System.Configuration;
using UniversalWeather.CMS.API.Application.Common;
using UniversalWeather.CMS.API.Domain;
using System.Threading.Tasks;
//using UniversalWeather.CMS.API.Application.Exceptions;

namespace UniversalWeather.CMS.API.Application.Service
{
    public class AppointmentService : BaseService, IAppointmentService
    {
        private readonly IAppointmentRepository _appointmentRepository;

        /// <summary>
        /// Setup the post repository
        /// </summary>
        /// <param name="repository">The post repository</param>
        public AppointmentService(IAppointmentRepository repository)
        {
            if (repository == null)
                throw new ArgumentNullException("Appointment respository is null");

            _appointmentRepository = repository;
        }

        /// <summary>
        /// Get Appointment
        /// </summary>
        /// <param name="id"></param>
        /// <param name="fullyLoad"></param>
        /// <param name="includeTakenAppointments"></param>
        /// <returns></returns>
        public async Task<Appointment> GetAppointment(Guid id, bool fullyLoad, bool includeTakenAppointments)
        {
            Appointment appointment = null;
            if (!fullyLoad)
            {
                if (!includeTakenAppointments)
                {
                    appointment = await _appointmentRepository.GetAppointment(id);
                }
                else
                {
                    appointment = await _appointmentRepository.GetAppointmentIncludeTaken(id);
                }
            }
            else
            {
                if (!includeTakenAppointments)
                {
                    appointment = await _appointmentRepository.GetFullAppointment(id);
                }
                else
                {
                    appointment = await _appointmentRepository.GetFullAppointmentIncludeTaken(id);
                }
            }
            return appointment;
        }

        /// <summary>
        /// Get All Appointments
        /// </summary>
        /// <param name="fullyLoad"></param>
        /// <param name="includeTakenAppointments"></param>
        /// <returns></returns>
        public async Task<IEnumerable<Appointment>> GetAllAppointments(bool fullyLoad, bool includeTakenAppointments)
        {
            IEnumerable<Appointment> getAllAppointments = null;
            if (!fullyLoad)
            {
                if (!includeTakenAppointments)
                {
                    getAllAppointments = _appointmentRepository.GetAll();
                }
                else
                {
                    getAllAppointments = await _appointmentRepository.GetAllIncludeTaken();
                }
            }
            else
            {
                if (!includeTakenAppointments)
                {
                    getAllAppointments = await _appointmentRepository.GetAllFullyLoaded();
                }
                else
                {
                    getAllAppointments = await _appointmentRepository.GetAllFullyLoadedIncludeTaken();
                }
            }
            return getAllAppointments;
        }

        /// <summary>
        /// Save Appointment
        /// </summary>
        /// <param name="apt"></param>
        public async Task<int> SaveAppointment(Appointment apt)
        {
            var appointment = await _appointmentRepository.SaveAppointment(apt);
            if (appointment != 0)
            {
                //_sendAppointment(apt);
            }
            return appointment;
        }

        /// <summary>
        /// Mark AppointmentTaken
        /// </summary>
        /// <param name="markapt"></param>
       
        public async Task<int> MarkAppointmentTaken(MarkAppointment markapt)
        {
            return await _appointmentRepository.MarkAppointmentTaken(markapt);
        }

        /// <summary>
        /// Send appointment
        /// </summary>
        /// <param name="apt"></param>
        /// <returns></returns>
        private string _sendAppointment(Appointment apt)
        {
            using (MailMessage mailMessage = new MailMessage())
            {
                mailMessage.From = new MailAddress(ConfigurationManager.AppSettings["ServerEmailAddress"]);
                mailMessage.Subject = "[CORE] Customer Callback Request";
                mailMessage.Body += string.Format("Appointment received from {0}", apt.Name);
                mailMessage.To.Add(ConfigurationManager.AppSettings["CustomerServiceMailbox"]);
                //                  mailMessage.ReplyToList.Add(requestModel.replyToEmail);
                //                  mailMessage.Bcc.Add(bccEmailAddress);

                return EmailHelper.SendMailMessage(mailMessage);
            }
        }
    }
}
